# Copyright Vespa.ai. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
schema doc {

    document doc {

        field id type string {
            indexing: summary | attribute
        }

        field title type string {
            indexing: index | summary
            index: enable-bm25
        }

        field text type string {
            
        }

        field created_timestamp type int {
            indexing: attribute | summary
        }
        field modified_timestamp type int {
            indexing: attribute | summary
        }
        
        field last_opened_timestamp type int {
            indexing: attribute | summary
        }
        field open_count type int {
            indexing: attribute | summary
        }
        field favorite type bool {
            indexing: attribute | summary
        }

    }

    field title_embedding type tensor<int8>(x[96]) {
        indexing: input title | embed | pack_bits | attribute | index
        attribute {
            distance-metric: hamming
        }
    }

    field chunks type array<string> {
        indexing: input text | chunk fixed-length 1024 | summary | index
        index: enable-bm25
    }

    field chunk_embeddings type tensor<int8>(chunk{}, x[96]) {
        indexing: input text | chunk fixed-length 1024 | embed | pack_bits | attribute | index
        attribute {
            distance-metric: hamming
        }
    }

    fieldset default {
        fields: title, chunks
    }

    rank-profile match-only {
        inputs {
            query(embedding) tensor<int8>(x[96])
        }
    }

    rank-profile default {
        match-features: bm25(title) bm25(chunks) closeness(title_embedding) closeness(chunk_embeddings) chunk_sim_scores chunk_text_scores
        inputs {
            query(embedding) tensor<int8>(x[96])
        }

        rank chunks {
            element-gap: 0 # Fixed length chunking should not cause any positional gap between elements
        }
        function chunk_text_scores() {
            expression: elementwise(bm25(chunks),chunk,float)
        }

        function chunk_dist_scores() {
            expression: reduce(hamming(query(embedding), attribute(chunk_embeddings)), sum, x)
        }

        function chunk_sim_scores() {
            expression: 1/ (1 + chunk_dist_scores())
        }

        first-phase {
            expression {
                0.35 * closeness(title_embedding) +
                0.15 * closeness(chunk_embeddings) +
                0.35 * bm25(title) +
                0.15 * bm25(chunks) +
                sum(chunk_sim_scores()) +
                sum(chunk_text_scores())
            }
        }
    }

}
